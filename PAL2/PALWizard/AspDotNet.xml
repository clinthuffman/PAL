<PAL NAME="ASP.NET" DESCRIPTION="Use this of ASP.NET applications in Windows 2000 Server and above. This threshold file includes the .NET Framework threshold file." CONTENTOWNERS="Clint Huffman" FEEDBACKEMAILADDRESS="clinth@microsoft.com" VERSION="1.3.3" PALVERSION="2.0" LANGUAGE="English" LANGUAGECODE="en">
  <ANALYSIS NAME="ASP.NET Request Execution Time" ENABLED="True" CATEGORY="ASP.NET Applications" PRIMARYDATASOURCE="\ASP.NET Applications(*)\Request Execution Time" ID="{5116eeca-7a7f-46a2-9178-d01f90024d06}" FROMALLCOUNTERSTATS="False">
    <DATASOURCE TYPE="CounterLog" NAME="\ASP.NET Applications(*)\Request Execution Time" COLLECTIONVARNAME="CollectionOfASPNETApplicationsRequestExecutionTimeALL" EXPRESSIONPATH="\ASP.NET Applications(*)\Request Execution Time" DATATYPE="integer">
      <EXCLUDE INSTANCE="__Total__" />
    </DATASOURCE>
    <THRESHOLD NAME="ASP.NET execution times are greater than 5 seconds" CONDITION="Warning" COLOR="Yellow" PRIORITY="50">
      <DESCRIPTION><![CDATA[ ]]></DESCRIPTION>
      <CODE><![CDATA[
        StaticThreshold -CollectionOfCounterInstances $CollectionOfASPNETApplicationsRequestExecutionTimeALL -Operator 'gt' -Threshold 5000
         ]]></CODE>
    </THRESHOLD>
    <THRESHOLD NAME="ASP.NET execution times are greater than 8 seconds" CONDITION="Critical" COLOR="Red" PRIORITY="100">
      <DESCRIPTION><![CDATA[ ]]></DESCRIPTION>
      <CODE><![CDATA[
        StaticThreshold -CollectionOfCounterInstances $CollectionOfASPNETApplicationsRequestExecutionTimeALL -Operator 'gt' -Threshold 8000
        ]]></CODE>
    </THRESHOLD>
    <CHART CHARTTITLE="\ASP.NET Applications(*)\Request Execution Time" ISTHRESHOLDSADDED="True" DATASOURCE="\ASP.NET Applications(*)\Request Execution Time" CHARTLABELS="instance" MAXLIMIT="9999">
      <SERIES NAME="Warning">
        <CODE><![CDATA[
          StaticChartThreshold -CollectionOfCounterInstances $CollectionOfASPNETApplicationsRequestExecutionTimeALL -MinThreshold 5000 -MaxThreshold 8000 -UseMaxValue $False
        ]]></CODE>
      </SERIES>
      <SERIES NAME="Critical">
        <CODE><![CDATA[
          StaticChartThreshold -CollectionOfCounterInstances $CollectionOfASPNETApplicationsRequestExecutionTimeALL -MinThreshold 8000 -MaxThreshold 9999 -UseMaxValue $False
        ]]></CODE>
      </SERIES>
    </CHART>
    <DESCRIPTION><![CDATA[
      The number of milliseconds taken to execute the last request. In version 1.0 of the Framework, the execution time begins when the worker process receives the request, and stops when the ASP.NET ISAPI sends HSE_REQ_DONE_WITH_SESSION to IIS. For IIS version 5, this includes the time taken to write the response to the client, but for IIS version 6, the response buffers are sent asynchronously, and so the time taken to write the response to the client is not included. Thus on IIS version 5, a client with a slow network connection will increase the value of this counter considerably. In version 1.1 of the Framework, execution time begins when the HttpContext for the request is created, and stops before the response is sent to IIS. Assuming that user code does not call HttpResponse.Flush, this implies that execution time stops before sending any bytes to IIS, or to the client for that matter. ASP.NET\Request Execution Time is an instance counter, and very volatile. On the other hand, time to last byte (TTLB) can be easily averaged and used to calculate a better estimate of performance over a period of time. TTLB can be calculated through a simple HTTP client written in managed code, or you can use one of the many HTTP clients available that calculate TTLB, such as Application Center Test (ACT). Note that if <compilation debug=/> is set to TRUE, then batch compilation will be disabled and the <httpRuntime executionTimeout=/> configuration setting as well as calls to Server.ScriptTimeout will be ignored. This can cause problems if the <processModel responseDeadlockInterval=/> setting is not set to Infinite, since requests for debug pages can theoretically run forever. Threshold: N.A. The value of this counter should be stable. Experience will help set a threshold for a particular site. When the process model is enabled, the request execution time includes the time required to write the response to the client, and therefore depends upon the bandwidth of the client's connection.
      <BR>
      Reference:<BR>
      <A HREF="http://msdn2.microsoft.com/en-us/library/ms972959.aspx">ASP.NET Performance</A>      
      ]]></DESCRIPTION>
  </ANALYSIS>
  <ANALYSIS NAME="ASP.NET Requests in Application Queue" ENABLED="True" CATEGORY="ASP.NET" PRIMARYDATASOURCE="\ASP.NET Applications(*)\Requests In Application Queue" ID="{eefae086-7670-4026-9f8d-9733dc998886}" FROMALLCOUNTERSTATS="False">
    <DATASOURCE TYPE="CounterLog" NAME="\ASP.NET Applications(*)\Requests In Application Queue" COLLECTIONVARNAME="CollectionOfASPNETApplicationsRequestsInApplicationQueueAll" EXPRESSIONPATH="\ASP.NET Applications(*)\Requests In Application Queue" DATATYPE="integer">
      <EXCLUDE INSTANCE="__Total__" />
    </DATASOURCE>
    <THRESHOLD NAME="More than 2 ASP.NET requests in application queue" CONDITION="Warning" COLOR="Yellow" PRIORITY="50">
      <CODE><![CDATA[
        StaticThreshold -CollectionOfCounterInstances $CollectionOfASPNETApplicationsRequestsInApplicationQueueAll -Operator 'gt' -Threshold 2]]></CODE>
    </THRESHOLD>
    <THRESHOLD NAME="More than 10 ASP.NET requests in application queue" CONDITION="Critical" COLOR="Red" PRIORITY="100">
      <DESCRIPTION><![CDATA[ ]]></DESCRIPTION>
      <CODE><![CDATA[
        StaticThreshold -CollectionOfCounterInstances $CollectionOfASPNETApplicationsRequestsInApplicationQueueAll -Operator 'gt' -Threshold 10
        ]]></CODE>
    </THRESHOLD>
    <CHART CHARTTITLE="\ASP.NET Applications(*)\Requests In Application Queue" ISTHRESHOLDSADDED="True" DATASOURCE="\ASP.NET Applications(*)\Requests In Application Queue" CHARTLABELS="instance">
      <SERIES NAME="Warning">
        <CODE><![CDATA[
          StaticChartThreshold -CollectionOfCounterInstances $CollectionOfASPNETApplicationsRequestsInApplicationQueueAll -MinThreshold 2 -MaxThreshold 10 -UseMaxValue $False
        ]]></CODE>
      </SERIES>
      <SERIES NAME="Critical">
        <CODE><![CDATA[
          StaticChartThreshold -CollectionOfCounterInstances $CollectionOfASPNETApplicationsRequestsInApplicationQueueAll -MinThreshold 10 -MaxThreshold 19.99 -UseMaxValue $True
        ]]></CODE>
      </SERIES>
    </CHART>
    <DESCRIPTION><![CDATA[
      The number of requests currently queued. When running on IIS 5.0, there is a queue between inetinfo and aspnet_wp, and there is one queue for each virtual directory. When running on IIS 6.0, there is a queue where requests are posted to the managed ThreadPool from native code, and a queue for each virtual directory. This counter includes requests in all queues. The queue between inetinfo and aspnet_wp is a named pipe through which the request is sent from one process to the other. The number of requests in this queue increases if there is a shortage of available I/O threads in the aspnet_wp process. On IIS 6.0 it increases when there are incoming requests and a shortage of worker threads. Note that requests are rejected when the Requests Current counter exceeds the <processModel requestQueueLimit=/>. Many people think this occurs when the Requests Queued counter exceeds requestQueueLimit, but this is not the case. When this limit is exceeded, requests will be rejected with a 503 status code and the message "Server is too busy." If a request is rejected for this reason, it will never reach managed code, and error handlers will not be notified. Normally this is only an issue when the server is under a very heavy load, although a "burst" load every hour might also cause this. For the unusual burst load scenario, you might be interested in the hotfix described in Knowledge Base Article 810259, which will allow you to increase the minimum number of I/O threads from the default of 1 per CPU. Each virtual directory has a queue that it uses to maintain the availability of worker and I/O threads. The number of requests in this queue increases if the number of available worker threads or available I/O threads falls below the limit specified by <httpRuntime minFreeThreads=/>. When the limit specified by <httpRuntime appRequestQueueLimit=/> is exceeded, the request is rejected with a 503 status code and the client receives an HttpException with the message "Server too busy." By itself, this counter is not a clear indicator of performance issues, nor can it be used to determine when requests will be rejected. In Knowledge Base Article 329959, two new performance counters were introduced to address this problem: Requests Current and Requests In Application Queue. Please see the descriptions for these two counters, as well as for Requests Rejected.
      <BR>
      Reference:<BR><BR>
      <A HREF="http://msdn2.microsoft.com/en-us/library/ms972959.aspx">ASP.NET Performance</A>
      ]]></DESCRIPTION>
  </ANALYSIS>
  <ANALYSIS NAME="ASP.NET Application Restarts" ENABLED="True" CATEGORY="ASP.NET" PRIMARYDATASOURCE="\ASP.NET\Application Restarts" ID="{24d77bcd-3f2a-4c19-957f-828a5f7e02a5}" FROMALLCOUNTERSTATS="False">
    <DATASOURCE TYPE="CounterLog" NAME="\ASP.NET\Application Restarts" COLLECTIONVARNAME="CollectionOfAspNETApplicationRestarts" EXPRESSIONPATH="\ASP.NET\Application Restarts" DATATYPE="integer">
      <EXCLUDE INSTANCE="__Total__" />
    </DATASOURCE>
    <THRESHOLD NAME="An increasing trend of more than 1 ASP.NET application restart per hour" CONDITION="Warning" COLOR="Yellow" PRIORITY="50">
      <DESCRIPTION><![CDATA[ ]]></DESCRIPTION>
      <CODE><![CDATA[
        StaticThreshold -CollectionOfCounterInstances $CollectionOfAspNETApplicationRestarts -Operator 'gt' -Threshold 1 -IsTrendOnly $True
         ]]></CODE>
    </THRESHOLD>
    <THRESHOLD NAME="An increasing trend of more than 5 ASP.NET application restarts per hour" CONDITION="Critical" COLOR="Red" PRIORITY="100">
      <DESCRIPTION><![CDATA[ ]]></DESCRIPTION>
      <CODE><![CDATA[
        StaticThreshold -CollectionOfCounterInstances $CollectionOfAspNETApplicationRestarts -Operator 'gt' -Threshold 5 -IsTrendOnly $True
        ]]></CODE>
    </THRESHOLD>
    <CHART CHARTTITLE="\ASP.NET(*)\Application Restarts" ISTHRESHOLDSADDED="False" DATASOURCE="\ASP.NET\Application Restarts" CHARTLABELS="instance" />
    <DESCRIPTION><![CDATA[
      The number of application restarts for all ASP.NET applications since the web server's last boot. Recreating the application domain and recompiling pages takes time, therefore unforeseen application restarts should be investigated. The application domain is unloaded when one of the following occurs:
      <ul type="disc"> <li>Modification of <b>machine.config</b>, <b>web.config</b>, or <b>global.asax</b>.</li> <li>Modification of the application's bin directory or its contents.</li> <li>When the number of compilations (ASPX, ASCX, or ASAX) exceeds the limit specified by &lt;compilation numRecompilesBeforeAppRestart=/&gt;.</li> <li>Modification of the physical path of a virtual directory.</li> <li>Modification of the code-access security policy. </li> <li>The Web service is restarted.</li> </ul> <p>For Web farms in production, it is recommended that a server be removed from rotation prior to updating content for best performance and reliability. For a single Web server in production, content can be updated while the server is under load. The hotfix described in <a href="http://support.microsoft.com/default.aspx?scid=kb;[ln];810281">Knowledge Base Article 810281</a> is of interest to anyone experiencing errors after an application restarts, such as sharing violations with an error similar to "Cannot access file &lt;FileName&gt; because it is being used by another process."

</p><p>An issue involving anti-virus software and applications restarts is fixed in Knowledge Base Article 820746: <a href="http://support.microsoft.com/?id=820746">FIX: Some Antivirus Programs May Cause Web Applications to Restart Unexpectedly</a> for v1.0, and in <a href="http://support.microsoft.com/?id=821438">Knowledge Base Article 821438</a> for v1.1. In a perfect world, the application domain will survive for the life of the process. Excessive values should be investigated, and a new threshold should be set as necessary.
</p><p><b>Thresholds:</b> This analysis throws a warning alert if more than 1 application restart occurs per hour and throw a critical alert if more than 5 application restarts per hour occurs.
      <BR><BR>
      Reference:
      <UL>
      <LI><A HREF="http://msdn2.microsoft.com/en-us/library/ms972959.aspx">ASP.NET Performance</A></LI>
      </UL>
      ]]></DESCRIPTION>
  </ANALYSIS>
  <ANALYSIS NAME="ASP.NET Worker Process Restarts" ENABLED="True" CATEGORY="ASP.NET" PRIMARYDATASOURCE="\ASP.NET\Worker Process Restarts" ID="{4f9e6f39-3346-4852-b1c2-586ed624530c}" FROMALLCOUNTERSTATS="False">
    <DATASOURCE TYPE="CounterLog" NAME="\ASP.NET\Worker Process Restarts" COLLECTIONVARNAME="ASPNETWorkerProcessRestarts" EXPRESSIONPATH="\ASP.NET\Worker Process Restarts" DATATYPE="integer">
      <EXCLUDE INSTANCE="__Total__" />
    </DATASOURCE>
    <CHART CHARTTITLE="\ASP.NET\Worker Process Restarts" ISTHRESHOLDSADDED="False" DATASOURCE="\ASP.NET\Worker Process Restarts" CHARTLABELS="instance" />
    <DESCRIPTION><![CDATA[Number of times a worker process has restarted on the machine.]]></DESCRIPTION>
  </ANALYSIS>
  <ANALYSIS NAME="ASP.NET Requests Current" ENABLED="True" CATEGORY="ASP.NET" PRIMARYDATASOURCE="\ASP.NET\Requests Current" ID="{afb68727-b248-4dd1-b03c-d76d072f2c02}" FROMALLCOUNTERSTATS="False">
    <DATASOURCE TYPE="CounterLog" NAME="\ASP.NET\Requests Current" COLLECTIONVARNAME="ASPNETRequestsCurrent" EXPRESSIONPATH="\ASP.NET\Requests Current" DATATYPE="integer">
      <EXCLUDE INSTANCE="__Total__" />
    </DATASOURCE>
    <CHART CHARTTITLE="\ASP.NET\Requests Current" ISTHRESHOLDSADDED="False" DATASOURCE="\ASP.NET\Requests Current" CHARTLABELS="instance" />
    <DESCRIPTION><![CDATA[The current number of requests, including those that are queued, currently executing, or waiting to be written to the client.  Under the ASP.NET process model, when this counter exceeds the requestQueueLimit defined in the processModel configuration section, ASP.NET will begin rejecting requests. <br>
<br><b>
processModel Element (ASP.NET Settings Schema)</b><br>
<br>
http://msdn2.microsoft.com/en-us/library/7w2sway1(VS.80).aspx<br>
<br>
If the number of requests allowed in the queue is exceeded, ASP.NET begins returning <b>"503 Ã¢â‚¬â€œ Server Too Busy" </b>errors to new requests. When this limit is reached, the system is operating in abnormal conditions. This might be a symptom of a malfunction or, maybe, just high load. Restarting (bouncing) the worker process might become the only way to prevent further problems.

]]></DESCRIPTION>
  </ANALYSIS>
  <ANALYSIS NAME="ASP.NET Request Wait Time" ENABLED="True" CATEGORY="ASP.NET" PRIMARYDATASOURCE="\ASP.NET\Request Wait Time" ID="{f90e4f41-b471-4310-8a49-a8ee52e8d3c5}" FROMALLCOUNTERSTATS="False">
    <DATASOURCE TYPE="CounterLog" NAME="\ASP.NET\Request Wait Time" COLLECTIONVARNAME="ASPNETRequestWaitTime" EXPRESSIONPATH="\ASP.NET\Request Wait Time" DATATYPE="integer">
      <EXCLUDE INSTANCE="__Total__" />
    </DATASOURCE>
    <CHART CHARTTITLE="\ASP.NET\Request Wait Time" ISTHRESHOLDSADDED="False" DATASOURCE="\ASP.NET\Request Wait Time" CHARTLABELS="instance" />
    <DESCRIPTION><![CDATA[The number of milliseconds the most recent request was waiting in the queue.]]></DESCRIPTION>
  </ANALYSIS>
  <ANALYSIS NAME="ASP.NET Requests Rejected" ENABLED="True" CATEGORY="ASP.NET" PRIMARYDATASOURCE="\ASP.NET\Requests Rejected" ID="{e1ad5911-be81-41c3-875c-2acec08b033a}" FROMALLCOUNTERSTATS="False">
    <DATASOURCE TYPE="CounterLog" NAME="\ASP.NET\Requests Rejected" COLLECTIONVARNAME="ASPNETRequestsRejected" EXPRESSIONPATH="\ASP.NET\Requests Rejected" DATATYPE="integer">
      <EXCLUDE INSTANCE="__Total__" />
    </DATASOURCE>
    <CHART CHARTTITLE="\ASP.NET\Requests Rejected" ISTHRESHOLDSADDED="False" DATASOURCE="\ASP.NET\Requests Rejected" CHARTLABELS="instance" />
    <DESCRIPTION><![CDATA[The number of requests rejected because the request queue was full.]]></DESCRIPTION>
  </ANALYSIS>
  <ANALYSIS NAME="ASP.NET Apps v2.0.50727 Request Execution Time" ENABLED="True" CATEGORY="ASP.NET Apps v2.0.50727" PRIMARYDATASOURCE="\ASP.NET Apps v2.0.50727(*)\Request Execution Time" ID="{7824b8cd-4d17-4d7c-8014-9f32e4a8de4b}" FROMALLCOUNTERSTATS="False">
    <DATASOURCE TYPE="CounterLog" NAME="\ASP.NET Apps v2.0.50727(*)\Request Execution Time" COLLECTIONVARNAME="ASPNETAppsv2050727RequestExecutionTimeALL" EXPRESSIONPATH="\ASP.NET Apps v2.0.50727(*)\Request Execution Time" DATATYPE="integer">
      <EXCLUDE INSTANCE="__Total__" />
    </DATASOURCE>
    <CHART CHARTTITLE="\ASP.NET Apps v2.0.50727(*)\Request Execution Time" ISTHRESHOLDSADDED="True" DATASOURCE="\ASP.NET Apps v2.0.50727(*)\Request Execution Time" CHARTLABELS="instance">
      <SERIES NAME="Warning">
        <CODE><![CDATA[StaticChartThreshold -CollectionOfCounterInstances $ASPNETAppsv2050727RequestExecutionTimeALL -MinThreshold 5000 -MaxThreshold 8000 -IsOperatorGreaterThan $True -UseMaxValue $False]]></CODE>
      </SERIES>
      <SERIES NAME="Critical">
        <CODE><![CDATA[StaticChartThreshold -CollectionOfCounterInstances $ASPNETAppsv2050727RequestExecutionTimeALL -MinThreshold 8000 -MaxThreshold 9999.999 -IsOperatorGreaterThan $True -UseMaxValue $True]]></CODE>
      </SERIES>
    </CHART>
    <THRESHOLD NAME="Greater than 5 second ASP.NET execution times" CONDITION="Warning" COLOR="Yellow" PRIORITY="50">
      <DESCRIPTION><![CDATA[]]></DESCRIPTION>
      <CODE><![CDATA[StaticThreshold -CollectionOfCounterInstances $ASPNETAppsv2050727RequestExecutionTimeALL -Operator 'gt' -Threshold 5000]]></CODE>
    </THRESHOLD>
    <THRESHOLD NAME="Greater than 8 second ASP.NET execution times" CONDITION="Critical" COLOR="Red" PRIORITY="100">
      <DESCRIPTION><![CDATA[]]></DESCRIPTION>
      <CODE><![CDATA[StaticThreshold -CollectionOfCounterInstances $ASPNETAppsv2050727RequestExecutionTimeALL -Operator 'gt' -Threshold 8000]]></CODE>
    </THRESHOLD>
    <DESCRIPTION><![CDATA[The number of milliseconds that it took to execute the most recent request.]]></DESCRIPTION>
  </ANALYSIS>
  <ANALYSIS NAME="ASP.NET Apps v2.0.50727 Requests/Sec" ENABLED="True" CATEGORY="ASP.NET Apps v2.0.50727" PRIMARYDATASOURCE="\ASP.NET Apps v2.0.50727(*)\Requests/Sec" ID="{4c0d3132-1554-47d2-b2ee-06dad083b273}" FROMALLCOUNTERSTATS="False">
    <DATASOURCE TYPE="CounterLog" NAME="\ASP.NET Apps v2.0.50727(*)\Requests/Sec" COLLECTIONVARNAME="ASPNETAppsv2050727RequestsSecALL" EXPRESSIONPATH="\ASP.NET Apps v2.0.50727(*)\Requests/Sec" DATATYPE="integer">
      <EXCLUDE INSTANCE="__Total__" />
    </DATASOURCE>
    <CHART CHARTTITLE="\ASP.NET Apps v2.0.50727(*)\Requests/Sec" ISTHRESHOLDSADDED="False" DATASOURCE="\ASP.NET Apps v2.0.50727(*)\Requests/Sec" CHARTLABELS="instance" />
    <DESCRIPTION><![CDATA[The number of requests executed per second.]]></DESCRIPTION>
  </ANALYSIS>
  <ANALYSIS NAME="ASP.NET Apps v2.0.50727 Requests In Application Queue" ENABLED="True" CATEGORY="ASP.NET Apps v2.0.50727" PRIMARYDATASOURCE="\ASP.NET Apps v2.0.50727(*)\Requests In Application Queue" ID="{c32b4226-4f62-41bc-bf18-88144fcec7a5}" FROMALLCOUNTERSTATS="False">
    <DATASOURCE TYPE="CounterLog" NAME="\ASP.NET Apps v2.0.50727(*)\Requests In Application Queue" COLLECTIONVARNAME="ASPNETAppsv2050727RequestsInApplicationQueueALL" EXPRESSIONPATH="\ASP.NET Apps v2.0.50727(*)\Requests In Application Queue" DATATYPE="integer">
      <EXCLUDE INSTANCE="__Total__" />
    </DATASOURCE>
    <CHART CHARTTITLE="\ASP.NET Apps v2.0.50727(*)\Requests In Application Queue" ISTHRESHOLDSADDED="True" DATASOURCE="\ASP.NET Apps v2.0.50727(*)\Requests In Application Queue" CHARTLABELS="instance">
      <SERIES NAME="Warning">
        <CODE><![CDATA[StaticChartThreshold -CollectionOfCounterInstances $ASPNETAppsv2050727RequestsInApplicationQueueALL -MinThreshold 2 -MaxThreshold 10 -IsOperatorGreaterThan $True -UseMaxValue $False]]></CODE>
      </SERIES>
      <SERIES NAME="Critical">
        <CODE><![CDATA[StaticChartThreshold -CollectionOfCounterInstances $ASPNETAppsv2050727RequestsInApplicationQueueALL -MinThreshold 10 -MaxThreshold 14.999 -IsOperatorGreaterThan $True -UseMaxValue $True]]></CODE>
      </SERIES>
    </CHART>
    <THRESHOLD NAME="More than 2 requests in the application queue" CONDITION="Warning" COLOR="Yellow" PRIORITY="50">
      <DESCRIPTION><![CDATA[]]></DESCRIPTION>
      <CODE><![CDATA[StaticThreshold -CollectionOfCounterInstances $ASPNETAppsv2050727RequestsInApplicationQueueALL -Operator 'gt' -Threshold 2]]></CODE>
    </THRESHOLD>
    <THRESHOLD NAME="More than 10 requests in the application queue" CONDITION="Critical" COLOR="Red" PRIORITY="100">
      <DESCRIPTION><![CDATA[]]></DESCRIPTION>
      <CODE><![CDATA[StaticThreshold -CollectionOfCounterInstances $ASPNETAppsv2050727RequestsInApplicationQueueALL -Operator 'gt' -Threshold 10]]></CODE>
    </THRESHOLD>
    <DESCRIPTION><![CDATA[The number of requests in the application request queue.]]></DESCRIPTION>
  </ANALYSIS>
</PAL>
